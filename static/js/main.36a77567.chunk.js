(this["webpackJsonpmarkdown-previewer"]=this["webpackJsonpmarkdown-previewer"]||[]).push([[0],{13:function(e,t,n){},14:function(e,t,n){},16:function(e,t,n){"use strict";n.r(t);var r=n(1),a=n.n(r),i=n(8),o=n.n(i),s=(n(13),n(2)),c=n(5),d=n(4),l=n(3),h=(n(14),n(0)),p=function(e){Object(d.a)(n,e);var t=Object(l.a)(n);function n(e){var r;return Object(s.a)(this,n),(r=t.call(this,e)).render=function(){return Object(h.jsx)("div",{className:"TextEditor",id:"text-editor",children:Object(h.jsx)("textarea",{id:"editor",onChange:r.props.changeText,children:r.props.text})})},r}return n}(a.a.Component),u=n(7),m=n.n(u);m.a.setOptions({breaks:!0});var b=function(e){Object(d.a)(n,e);var t=Object(l.a)(n);function n(e){var r;return Object(s.a)(this,n),(r=t.call(this,e)).render=function(){var e=r.props.text;return Object(h.jsx)("div",{className:"TextPreview",id:"text-preview",children:Object(h.jsx)("div",{id:"preview",dangerouslySetInnerHTML:{__html:m()(e)}})})},r}return n}(a.a.Component),f=function(e){Object(d.a)(n,e);var t=Object(l.a)(n);function n(e){var r;return Object(s.a)(this,n),(r=t.call(this,e)).changeText=function(e){r.setState({text:e.target.value})},r.render=function(){var e=r.state.text;return Object(h.jsxs)("div",{className:"App",children:[Object(h.jsx)(p,{text:e,changeText:r.changeText}),Object(h.jsx)(b,{text:e})]})},r.state={text:v},r.changeText=r.changeText.bind(Object(c.a)(r)),r}return n}(a.a.Component),v='# Markdown Previewer\n\nThis project was bootstrapped with [Create React App](https://github.com/facebook/create-react-app).\n\n## User stories\n\n1. I can see a textarea element with a corresponding id="editor".\n\n2. I can see an element with a corresponding id="preview".\n\n3. When I enter text into the #editor element, the #preview element is updated as I type to display the content of the textarea.\n\n4. When I enter GitHub flavored markdown into the #editor element, the text is rendered as HTML in the #preview element as I type (HINT: You don\'t need to parse Markdown yourself - you can import the Marked library for this: https://cdnjs.com/libraries/marked).\n\n5. When my markdown previewer first loads, the default text in the #editor field should contain valid markdown that represents at least one of each of the following elements: a header (H1 size), a sub header (H2 size), a link, inline code, a code block, a list item, a blockquote, an image, and bolded text.\n\n6. When my markdown previewer first loads, the default markdown in the #editor field should be rendered as HTML in the #preview element.\n\n7. My markdown previewer interprets carriage returns and renders them as br (line break) elements.\n\n```\nimport React from \'react\';\nimport marked from \'marked\';\n\nclass TextPreview extends React.Component {\n  constructor(props) {\n    super(props);\n  };\n\n  render = () => {\n    const { text } = this.props;\n\n    return (\n      <div className="TextPreview" id="preview"\n        dangerouslySetInnerHTML= {{\n          __html: marked(text)\n        }}\n      />\n    );\n  };\n};\n\nexport default TextPreview;\n```\n\n> npm install marked\n\n- **NPM**\n  - React\n    - Marked\n\n## Available Scripts\n\nIn the project directory, you can run:\n\n### `npm start`\n\nRuns the app in the development mode. Open [http://localhost:3000](http://localhost:3000) to view it in the browser.\n\nThe page will reload if you make edits. You will also see any lint errors in the console.\n\n### `npm test`\n\nLaunches the test runner in the interactive watch mode. See the section about [running tests](https://facebook.github.io/create-react-app/docs/running-tests) for more information.\n\n### `npm run build`\n\nBuilds the app for production to the `build` folder. It correctly bundles React in production mode and optimizes the build for the best performance.\n\nThe build is minified and the filenames include the hashes. Your app is ready to be deployed!\n\nSee the section about [deployment](https://facebook.github.io/create-react-app/docs/deployment) for more information.\n\n![LuVitale](https://luvitale.net/favicon.ico)\n\nDone by [Luciano Nahuel Vitale](https://luvitale.net)\n',x=f,w=function(e){e&&e instanceof Function&&n.e(3).then(n.bind(null,17)).then((function(t){var n=t.getCLS,r=t.getFID,a=t.getFCP,i=t.getLCP,o=t.getTTFB;n(e),r(e),a(e),i(e),o(e)}))};o.a.render(Object(h.jsx)(a.a.StrictMode,{children:Object(h.jsx)(x,{})}),document.getElementById("root")),w()}},[[16,1,2]]]);
//# sourceMappingURL=main.36a77567.chunk.js.map